const phantomcss = require('phantomcss');
// const fs = require('fs');
// consnpt Iconv  = require('iconv').Iconv;

// キャプチャするURLリストの取得
// var buf = fs.read('./list.csv');
// buf = buf.replace( /\r\n/g , '\n' );
// const captureList = makeCSVArray(buf);


// var iconv = new Iconv('UTF-8', 'SHIFT_JIS//IGNORE');
// const conv = iconv.convert(buf);
// const iconv2 = new Iconv('SHIFT_JIS', 'UTF-8');
// const after = iconv2.convert(conv);
// console.log(after)


// console.log(captureList)

// csvファイルを配列化
// function makeCSVArray(buf){
//   var csvData = [];
//   var lines = buf.split('\n');
//   for(var i = 0; i < lines.length; i++){
//       var cells = lines[i].split(',');
//       if(cells.length !=1){
//           csvData.push(cells);
//       }
//   }
//   return csvData;
// }

phantomcss.init({
  /*
  リベースは、手動でファイルを削除せずに新しいベースラインイメージを作成したい場合に便利です。
  */
  rebase: casper.cli.get('rebase'),

  /*
    captureWaitEnabledのデフォルトはtrueで、falseに設定するとそれぞれの待ち時間/遅延が削除されます。
    ビジュアルテストでアニメーションやレイテンシを気にする必要がない場合に便利です。
  */
  captureWaitEnabled: true,

	/*
		libraryRootは、SlimerJSを使用していて正しいパスを設定しなければならない場合を除いて、オプションになりました。これはあなたのphantomcssフォルダを指している必要があります。NPMを使用している場合は、おそらく'./node_modules/phantomcss''になるでしょう。
	*/
	libraryRoot: './node_modules/phantomcss',

	screenshotRoot: './screenshots',

	/*
		デフォルトでは、失敗画像は './failures' フォルダに置かれます。failedComparisonsRoot が false に設定されている場合、別のフォルダは作成されませんが、失敗画像は元の画像と新しい画像と一緒に見つけることができます。
	*/
	failedComparisonsRoot: './failures',

	/*
		実行後に結果ディレクトリツリーを削除します。 failedComparisonsRootと併用して、失敗した比較を表示します。
	*/
	cleanupComparisonImages: true,

	/*
		A reference to a particular Casper instance. Required for SlimerJS
	*/
	casper: specific_instance_of_casper,

	/*
		マスター/ベースライン画像は diffs/failures とは全く別のフォルダに置いておいた方がいいかもしれません。 バージョン管理システムで作業するときに便利です。デフォルトでは、これは screenshotRoot フォルダに解決されます。
	*/
	comparisonResultRoot: './results',

	/*
		画像にカウント数を追加しない。falseに設定すると、スクリーンショットをキャプチャする際にファイル名が必要になります。
	*/
	addIteratorToImage: false,

	/*
		生成された失敗画像にラベルを追加しない
	*/
	addLabelToFailedImage: false,

	/*
		不一致の許容範囲のデフォルトは0.05%です。この値を上げると、テストカバレッジが低下します。
	*/
	mismatchTolerance: 0.05,

	/*
		Callbacks for your specific integration
	*/
	onFail: function(test){ console.log(test.filename, test.mismatch); },

	onPass: function(test){ console.log(test.filename); },

	/*
		Called when creating new baseline images
	*/
	onNewImage: function(){ console.log(test.filename); },

	onTimeout: function(){ console.log(test.filename); },

	onComplete: function(allTests, noOfFails, noOfErrors){
		allTests.forEach(function(test){
			if(test.fail){
				console.log(test.filename, test.mismatch);
			}
		});
	},

	onCaptureFail: function(ex, target) { console.log('Capture of ' + target + ' failed due to ' + ex.message); }

	/*
		Change the output screenshot filenames for your specific
		integration
	*/
	fileNameGetter: function(root,filename){
		// globally override output filename
		// files must exist under root
		// and use the .diff convention
		var name = root+'/somewhere/'+filename;
		if(fs.isFile(name+'.png')){
			return name+'.diff.png';
		} else {
			return name+'.png';
		}
	},

	/*
		Prefix the screenshot number to the filename, instead of suffixing it
	*/
	prefixCount: true,

	/*
		Output styles for image failure outputs generated by Resemble.js
	*/
	outputSettings: {
		errorColor: {
			red: 255,
			green: 255,
			blue: 0
		},
		errorType: 'movement',
		transparency: 0.3
	},

	/*
		Rebase is useful when you want to create new baseline
		images without manually deleting the files
		casperjs demo/test.js --rebase
	*/
	rebase: casper.cli.get("rebase"),

	/*
		If true, test will fail when captures fail (e.g. no element matching selector).
	 */
	failOnCaptureError: false
});

/*
	CSS トランジションと jQuery アニメーションをオフにする
*/
phantomcss.turnOffAnimations();
// start a casper test

casper.test.begin('Tags', function(test) {

  // phantomcss.init({
  //   rebase: casper.cli.get('rebase')
  // });

  // open page
  casper.start('http://127.0.0.1:8888/');

  casper.viewport(1024, 768);

  casper.then(function() {
      // take the screenshot of the whole body element and save it under "body.png". The first parameter is actually a CSS selector
      phantomcss.screenshot('body', 'body');
  });

  casper.then(function () {
    // compare screenshots
    phantomcss.compareAll();
  });

  // run tests
  casper.run(function() {
    console.log('\nTHE END.');
    casper.test.done();
  });
});
